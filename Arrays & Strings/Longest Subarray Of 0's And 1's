Solution {
  public:
    int maxLen(vector<int> &arr)
    {
        // Your code here
        int zeros=0,ones=0;
        int l=0;
        int r=0;
        unordered_map<int,int>Map;
        int sum=0;
        int maxLen=0;
        for(int i=0;i<arr.size();i++)
        {
            if(arr[i]==0)
            arr[i]= -1;
            
            sum=sum+arr[i];
            // int rem=sum
            //Treat Every 0 as -1 So That If Sum Becomes 0 Thenn It Balances Both 0s And 1s
            //If Sum Reaches 0 Then The Current Subarray Has Equal Number Of 0s And 1s
            if(sum==0)
            {
                maxLen=i+1;
            }
            if(Map.find(sum)!=Map.end())
            {
                maxLen=max(maxLen,i-Map[sum]);
            }
            
            if(Map.find(sum)==Map.end())
            Map[sum]=i;
        }
        return maxLen;
    }
};
