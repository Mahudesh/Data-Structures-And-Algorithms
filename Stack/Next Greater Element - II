#LeetCode: 503
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) 
    {
        // stack<int>st;
        // vector<int>ans;
        // for(int i=2*nums.size()-1;i>=0;i--)
        // {
        //     //nums[i%n] are used to access the original element index position of the num array
        //     while(!st.empty() && st.top()<=nums[i%nums.size()])
        //     {
        //         st.pop();
        //     }
        //     if(st.empty() && i<nums.size())
        //     {
        //         ans.push_back(-1);
        //     }
        //     else if(!st.empty() && i<nums.size())
        //     {
        //         ans.push_back(st.top());
        //     }
        //     //By Using This Line We Can Put The Elements Of Nums Fully Into The Stack Without Pop();
        //     //Because Pop Has Conditionn i<n, So Once The Iteration Comes To Less Than The Size Of The Original Array
        //     //We Will Work On It
        //     st.push(nums[i%nums.size()]);
         
        // }
        // reverse(ans.begin(),ans.end());
        // return ans;

        stack<int>st;
        vector<int>ans(nums.size(),-1);
        int n=nums.size();
        for(int i=2*n-1;i>=0;i--)
        {
            while(!st.empty() && st.top()<=nums[i%n])
            {
                st.pop();
            }
            if(!st.empty())
            {
                ans[i%n]=st.top();
            }
            st.push(nums[i%n]);
        }
        return ans;

    }
}; 
// 1 2 3 4 3   1 2 3 4 3
// 0 1 2 3 4   5 6 7 8 9
